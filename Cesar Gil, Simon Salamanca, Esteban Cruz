ACTIVIDAD 4: Control de flujo y lógica del juego

#Ejercicio 3: 

import unicodedata

def normalizar_palabra(palabra):
    # Normalizar la palabra para eliminar los acentos
    return ''.join(
        c for c in unicodedata.normalize('NFD', palabra)
        if unicodedata.category(c) != 'Mn'
    )

# Ejemplo de uso
palabra_original = "árbol"
palabra_normalizada = normalizar_palabra(palabra_original)

print("Original:", palabra_original)
print("Normalizada:", palabra_normalizada)



#Ejercicio 4: 

import random

def solicitar_pista(palabra, letras_descubiertas):
    letras_faltantes = [letra for letra in palabra if letra not in letras_descubiertas]
    if letras_faltantes:
        pista = random.choice(letras_faltantes)
        letras_descubiertas.add(pista)
        print(f"La pista es: {pista}")
    else:
        print("Ya no hay más letras por revelar.")
    return letras_descubiertas

# Ejemplo de uso
palabra = "programación"
letras_descubiertas = set()
intentos_restantes = 5

# Pedir pista
letras_descubiertas = solicitar_pista(palabra, letras_descubiertas)
intentos_restantes -= 1  # Reducir intentos por pedir pista
print(f"Intentos restantes: {intentos_restantes}")

#Ejercicio 5: 

#CON PICKEL:
import pickle

def guardar_estado(juego, archivo):
    with open(archivo, 'wb') as f:
        pickle.dump(juego, f)

def cargar_estado(archivo):
    with open(archivo, 'rb') as f:
        return pickle.load(f)

# Ejemplo de uso
estado_juego = {'palabra': 'programación', 'intentos': 3, 'letras_descubiertas': {'p', 'r'}}
guardar_estado(estado_juego, 'estado_juego.pkl')

# Cargar el estado
estado_recuperado = cargar_estado('estado_juego.pkl')
print(estado_recuperado)


#CON JSON:
import json

def guardar_estado_json(juego, archivo):
    with open(archivo, 'w') as f:
        json.dump(juego, f)

def cargar_estado_json(archivo):
    with open(archivo, 'r') as f:
        return json.load(f)

# Ejemplo de uso
estado_juego = {'palabra': 'programación', 'intentos': 3, 'letras_descubiertas': ['p', 'r']}
guardar_estado_json(estado_juego, 'estado_juego.json')

# Cargar el estado
estado_recuperado = cargar_estado_json('estado_juego.json')
print(estado_recuperado)




#Ejercicio 6:

def calcular_puntuacion(intentos_restantes, palabra):
    longitud_palabra = len(palabra)
    return intentos_restantes * longitud_palabra * 10

# Ejemplo de uso
intentos_restantes = 3
palabra = "programación"
puntuacion = calcular_puntuacion(intentos_restantes, palabra)
print(f"Puntuación: {puntuacion}")

#Ejercicio 7:

def jugar():
    # Lógica del juego aquí
    print("Has jugado una partida.")  # Ejemplo de partida
    return "ganado"  # O "perdido" según el resultado del juego


def main():
    jugar_nuevamente = True


    while jugar_nuevamente:
        resultado = jugar()  # Ejecuta una partida del juego
        jugar_nuevamente_input = input("¿Quieres jugar de nuevo? (s/n): ").lower()
       
        if jugar_nuevamente_input != 's':
            jugar_nuevamente = False
            print("Gracias por jugar.")
        else:
            print("Comenzando una nueva partida...")


if __name__ == "__main__":
    main()

#Ejercicio 8:

def jugar():
    # Lógica del juego aquí
    print("Has jugado una partida.")  # Ejemplo de partida
    return "ganado"  # O "perdido" según el resultado del juego


def registrar_historial(palabra, resultado):
    with open("historial.txt", "a") as archivo_historial:
        archivo_historial.write(f"Palabra: {palabra}, Resultado: {resultado}\n")


def main():
    jugar_nuevamente = True


    while jugar_nuevamente:
        # Ejemplo de palabra usada en el juego, podría ser generada aleatoriamente o seleccionada
        palabra_del_juego = "ejemplo"
        resultado = jugar()  # Ejecuta una partida del juego
        registrar_historial(palabra_del_juego, resultado)
       
        jugar_nuevamente_input = input("¿Quieres jugar de nuevo? (s/n): ").lower()
       
        if jugar_nuevamente_input != 's':
            jugar_nuevamente = False
            print("Gracias por jugar.")
        else:
            print("Comenzando una nueva partida...")


if __name__ == "__main__":
    main()

#Ejercicio 9

def mostrar_menu():
    print("Bienvenido al juego de palabras")
    print("Por favor, elige una opción:")
    print("1. Cambiar el nombre del jugador")
    print("2. Seleccionar el tema de palabras")
    print("3. Iniciar el juego")
    print("4. Salir")

def cambiar_nombre():
    nombre = input("Introduce el nuevo nombre del jugador: ")
    return nombre

def seleccionar_tema():
    temas = ["Animales", "Frutas", "Colores", "Países"]
    print("Selecciona un tema de palabras:")
    for i, tema in enumerate(temas, 1):
        print(f"{i}. {tema}")
    
    opcion = int(input("Elige una opción (1-4): "))
    if 1 <= opcion <= len(temas):
        return temas[opcion - 1]
    else:
        print("Opción no válida. Se seleccionará el tema por defecto: Animales.")
        return temas[0]

def iniciar_juego(nombre, tema):
    print(f"\n¡Comienza el juego, {nombre}! El tema de palabras es: {tema}.")

def main():
    nombre_jugador = "Jugador"
    tema_palabras = "Animales"
    
    while True:
        mostrar_menu()
        opcion = input("Selecciona una opción: ")

        if opcion == "1":
            nombre_jugador = cambiar_nombre()
        elif opcion == "2":
            tema_palabras = seleccionar_tema()
        elif opcion == "3":
            iniciar_juego(nombre_jugador, tema_palabras)
            break
        elif opcion == "4":
            print("¡Gracias por jugar! Hasta luego.")
            break
        else:
            print("Opción no válida. Intenta de nuevo.")

if __name__ == "__main__":
    main()

#Ejercicio 10

import unittest
from unittest.mock import patch

def cambiar_nombre(nombre):
    return nombre

def seleccionar_tema(opcion):
    temas = ["Animales", "Frutas", "Colores", "Países"]
    if 1 <= opcion <= len(temas):
        return temas[opcion - 1]
    return temas[0]

def iniciar_juego(nombre, tema):
    return f"¡Comienza el juego, {nombre}! El tema de palabras es: {tema}."


class TestJuego(unittest.TestCase):
    
    def test_cambiar_nombre(self):
        # Prueba de cambiar nombre
        self.assertEqual(cambiar_nombre("Carlos"), "Carlos")
        self.assertEqual(cambiar_nombre("Ana"), "Ana")
        self.assertEqual(cambiar_nombre(""), "")  # Caso vacío

    def test_seleccionar_tema(self):
        # Prueba de selección de tema válida
        self.assertEqual(seleccionar_tema(1), "Animales")
        self.assertEqual(seleccionar_tema(2), "Frutas")
        self.assertEqual(seleccionar_tema(3), "Colores")
        self.assertEqual(seleccionar_tema(4), "Países")

        # Prueba de selección de tema no válida
        self.assertEqual(seleccionar_tema(0), "Animales")  # Fuera de rango
        self.assertEqual(seleccionar_tema(5), "Animales")  # Fuera de rango

    def test_iniciar_juego(self):
        # Prueba de inicio del juego con diferentes nombres y temas
        self.assertEqual(iniciar_juego("Carlos", "Animales"), "¡Comienza el juego, Carlos! El tema de palabras es: Animales.")
        self.assertEqual(iniciar_juego("Ana", "Frutas"), "¡Comienza el juego, Ana! El tema de palabras es: Frutas.")
        self.assertEqual(iniciar_juego("", "Colores"), "¡Comienza el juego, ! El tema de palabras es: Colores.")  # Nombre vacío


if __name__ == "__main__":
    unittest.main()
